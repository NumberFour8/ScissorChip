#include "msp430.h"
NAME msp_addsub

PUBLIC mp_reduce
RSEG CODE

; Adds or subtracts 38 to the number given by R12 if
; the first bit in R13 is set. The second bit of R13 indicates whether
; to add (second bit not set) or subtract (second bit set).

mp_reduce
    
    PUSHM.W #3,R6
    
    MOV R13,R6  
    AND #2,R6   ; Extract second bit
    RRA R6      ; Move it right
    SUB #1,R6   ; If 2nd bit was set, we get 0, if not we get FFFF
    MOV #38,R5  
    XOR R6,R5   ; XOR the mask of zeros to keep or ones for negation
     
    MOV R13,R6 
    AND #1,R6  ; Isolate the carry bit
    XOR #1,R6  ; Flip it
    SUB #1,R6  ; Set zero if there was no carry, FFFF if there was
    AND R6,R5   
  
    MOV R12,R4
    ADD #32,R4

    SUB R5,0(R13)  ; Subtract from last limb 
    MOV SR,R6
ppg
    MOV R6,SR      ; Propagate carry
    SBC 0(R12)         
    MOV SR,R6      ; Do we need carry flag flipping?
    INCD R12
    CMP R12,R4
    JNZ ppg

    POPM.W #3,R6
RETA

PUBLIC mp_add   
RSEG CODE       

; Adds two 256-bit numbers A and B and stores the result in C.
; B is pointed by R14, A is pointed by R13
; The result C is pointed by R12

mp_add
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R14,R6
    ADD #32,R6
    CLRC   ; Need to reset carry bit for the first ADDC to be equivalent to ADD
inadd
    MOV @R13+,0(R12)
    ADDC @R14+,0(R12) 
    MOV SR,R5
    INCD R12
    CMP R14,R6
    JZ finadd
    MOV R5,SR
    JMP inadd
finadd   
    MOV R5,R13
    AND #1,R13     ; Extract only C flag, reset second bit for subtraction
    SUB #32,R12    ; Rewind R12
    
    POPM.W #2,R6
    
    CALLA #mp_reduce
RETA
      
PUBLIC mp_sub   
RSEG CODE       

; Subtracts B from A where A and B are 256-bit numbers and stores the result in C.
; B is pointed by R14, A is pointed by R13
; The result C is pointed by R12

mp_sub
    
    PUSHM.W #3,R6   ; Save R4 - R6
    
    CLR R4
    MOV R14,R6
    ADD #32,R6
    SETC           ; Need to set carry bit for the first SUBC to be equivalent to SUB
insub
    MOV @R13+,0(R12)
    SUBC @R14+,0(R12) 
    BIS SR,R4
    MOV SR,R5
    INCD R12
    CMP R14,R6
    JZ finsub
    MOV R5,SR
    JMP insub
finsub
    MOV R4,R13
    AND #4,R13      ; Extract only N flag
    RRAM.W #2,R13   ; Shift it to the first position
    BIS #2,R13      ; Set the second bit of R13 for subtraction
    SUB #32,R12     ; Rewind R12
    
    POPM.W #3,R6    ; Restore R4 - R6
    
    CALLA #mp_reduce
    
RETA
  
END
