#include "msp430.h"
NAME msp_mod32_25519

EXTERN mp_cprop
EXTERN mp_freeze

PUBLIC mp_mod32
RSEG CODE

; Reduces the number A modulo 2^255-19
; A is given by R12 and must be 512-bits (64 bytes) long in little-endian.

mp_mod32

  PUSHM.W #4,R11

  MOV R12,R9
  MOV R12,R11
  MOV #3,R8     ; In the worst-case scenario we need to reduce 3 times
  
  SUB #4, R9    ; Starting point
  ADD #32,R11   ; Upper pointer bound (beyond the MS word, additions by 2)
  
reduce_limbs
    ADD #4,R9
    CMP R9,R11
    JZ limbs_done       ; If terminal address has been reached, go to round_done
    
    MOV 0(R9),&MPY32L    ; LSB of LS half
    MOV 2(R9),&MPY32H
    MOV #1,&OP2L         ; 1
    MOV #0,&OP2H
    
    MOV 0x20(R9),&MAC32L   ; LSB of MS half 
    MOV 0x22(R9),&MAC32H
    MOV #38,&OP2L         ; 38
    MOV #0,&OP2H
    
    MOV R9,R10         ; Propagate the carry from here 
    ADD #6,R10         ; R11 is already set as an inclusive upper bound +1
    
    MOV  RES0,0(R9)     ; Save S to LSB of LS half
    MOV  RES1,2(R9)
    ADD  RES2,4(R9)     ; Add the carry to the second-LSB of the LS half
    ADDC RES3,6(R9)
    
    CALLA #mp_cprop     ; Propagate the carry further
    
    CLR 0x20(R9)        ; We don't need this MS limb anymore
    CLR 0x22(R9)
    JZ reduce_limbs    ; If no carry was created, proceed with the next digit
       
limbs_done  
    MOV R12,R9
    MOV R12,R11       
    ADD #4,R11          ; We lower the terminal address as we don't need to go further than 1 limb  
    SUB #4,R9           ; Rewind R9
    DEC R8
    JNZ reduce_limbs    ; If we didn't reduce 3 times, continue  
    
    POPM.W #4,R11
 
    CALLA #mp_freeze
RETA

END