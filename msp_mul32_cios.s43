	.cdecls C,LIST,"msp430.h"

	.global mp_freeze
	.global clear_mem

	.global mp_mulmod32_cios
	.text

; Performs modular multiplication of A and B which are both in Montgomery representation.
; This function utilizes fully the 32-bit multiplier.
; The reduction is done modulo 2^255-19
; A is pointed by R13, B is pointed by R14.
; The result T has to be pointed by R12. R15 contains the size of B (in bytes).

mp_mulmod32_cios:

  PUSHM.W #8,R11

  PUSH.W R13
  MOV #32,R13
  CALLA #clear_mem 
  POP.W R13

  ; Coarsely Integrated Operand Scanning
  ; m = R4,R7
  ; -------------------------------------- 
  SUB #8,SP ; 8 extra bytes needed on stack
  CLR 0(SP)
  CLR 2(SP)
  CLR 4(SP)
  CLR 6(SP)

  ; Store pointer to T
  MOV R12,R11

 ; For loop i = 0 .. s-1
 ; R15 contains size of B
  MOV R14,R10
  ADD #32,R10    ; Traverses B
outer_for3:

  ; (C,S) = t[0] + a[0]*b[i]
  MOV 0x0(R14),&MAC32L  ; b[i]
  MOV 0x2(R14),&MAC32H
  CLR &RES0
  CLR &RES1
  CLR &RES2
  CLR &RES3
  
  MOV R13,R6  ; Traverses A
  MOV R13,R8
  ADD R15,R6  ; Excluding sth word
  MOV R12,R5  ; Traverses T
inner_for3a:
   
   ; (C,S) = t[j] + a[j]*b[i] + C
   MOV &RES2,&RES0   ; C
   MOV &RES3,&RES1
   CLR &RES2
   CLR &RES3
   
   MOV @R8+,&OP2L  ; a[j]
   MOV @R8+,&OP2H
   
   ; t[j] = S
   ADD &RES0,0(R5)
   ADDC &RES1,2(R5)
   ADC &RES2
   ADC &RES3
   
   ADD #4,R5
   CMP R6,R8            ; &a < &a[s]
   JNZ inner_for3a
   
  ADD  &RES2,0(SP)     ; t[s] = t[s] + C
  ADDC &RES3,2(SP)
  
  ; t[s+1] = C
  CLR 4(SP)
  CLR 6(SP)
  ADC 4(SP)   
  
  ; m = t[0]*n'[0] mod 2^32
  MOV 0(R12),&MPY32L    ; t[0]
  MOV 2(R12),&MPY32H
  MOV #0xCA1B,&OP2L     ; n'[0]
  MOV #0x286B,&OP2H
  
  ; Store m in R4 and R7
  MOV &RES0,R4
  MOV &RES1,R7
  
  ; (C,S) = t[0] + m*n[0]
  MOV #1,&OP2L          ; 1
  MOV #0,&OP2H
  
  MOV R4,&MAC32L        ; m
  MOV R7,&MAC32H
  MOV #0xFFED,&OP2L     ; n[0]
  MOV #0xFFFF,&OP2H 
  
  MOV R12,R5  ; Traverses T
  ADD #28,R5  ; Excluding (s-1)th word
  ADD #4,R12  ; j = 1 (e.g. start at t[1])

  MOV #0xFFFF,&MAC32L   ; n[j]
  MOV #0xFFFF,&MAC32H
    
inner_for3b
   
    ; (C,S) = t[j] + C + m*n[j]
    MOV &RES2,&RES0    ; C
    MOV &RES3,&RES1
    CLR &RES2
    CLR &RES3
    
    ADD  @R12+,&RES0 ; t[j]
    ADDC @R12+,&RES1
    ADC &RES2
    ADC &RES3
    
    MOV R4,&OP2L   ; m 
    MOV R7,&OP2H
   
    ; t[j-1] = S
    MOV &RES0,-8(R12)
    MOV &RES1,-6(R12)
    
    CMP R12,R5
    JNE inner_for3b ; &t < &t[s]
   
   ; (C,S) = t[s-1] + m*n[s-1] + C
   MOV &RES2,&RES0    ; C
   MOV &RES3,&RES1
   CLR &RES2
   CLR &RES3
   
   ADD  0(R12),&RES0 ; t[s-1]
   ADDC 2(R12),&RES1
   ADC &RES2      
   ADC &RES3
    
   MOV R4,&MAC32L      ; m
   MOV R7,&MAC32H
   MOV #0xFFFF,&OP2L   ; n[s-1] 
   MOV #0x7FFF,&OP2H
   
   ; t[s-2] = S
   MOV &RES0,-4(R12)
   MOV &RES1,-2(R12)
    
   ; Reset pointer to T
   MOV R11,R12
   
   ; t[s] + C
   ADD  0(SP),&RES2
   ADDC 2(SP),&RES3
    
   ; t[s-1] = S
   MOV &RES2,28(R12)
   MOV &RES3,30(R12)
    
   ; t[s] = t[s+1] 
   MOV 4(SP),0(SP)
   MOV 6(SP),2(SP)
    
   ; t[s] + C
   ADC 0(SP)
   ADC 2(SP)
   
   ADD #4,R14
   CMP R14,R10 
   JNE outer_for3 ; &b < &b[s]
  
  ADD #8,SP
  POPM.W #8,R11
  
  CLR R13
  CALLA #mp_freeze ; Conditionally subtract 2^255-19 in constant time
    
  RETA

	.end
