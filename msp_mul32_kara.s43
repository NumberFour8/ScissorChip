	.cdecls C,LIST,"msp430.h"


	.global mp_cprop
	.global mp_bprop
	.global mp_mod32
	.global clear_mem
	.global mp_mul32

	.global mp_add_128
	.text

; Adds two 128-bit numbers A and B and stores the result in C.
; B is pointed by R11, A is pointed by R10
; The result C is pointed by R9

mp_add_128:
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R11,R6
    ADD #16,R6
    CLRC   ; Need to reset carry bit for the first ADDC to be equivalent to ADD
inadd128:
    MOV @R10+,0(R9)
    ADDC @R11+,0(R9) 
    MOV SR,R5
    INCD R9
    CMP R11,R6
    JZ fin128
    MOV R5,SR
    JMP inadd128

fin128:
    POPM.W #2,R6

	RETA

	.global mp_add_np
	.text

; Adds two N-byte numbers A and B in place, result is stored in A.
; B is pointed by R10, A is pointed by R9
; N is pointed by R15. On return, R9 is pointing at last processed word.

mp_add_np:
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R10,R6
    ADD R15,R6
    CLRC   ; Need to reset carry bit for the first ADDC to be equivalent to ADD
inadd128p:
    ADDC @R10+,0(R9) 
    MOV SR,R5
    INCD R9
    CMP R10,R6
    JZ fin128p
    MOV R5,SR
    JMP inadd128p

fin128p:
    DECD R9
    MOV R5,SR ; Restore the carry flag for further propagation
    POPM.W #2,R6

	RETA

; Subtracts two N-byte numbers B from A in place, result is stored in A.
; B is pointed by R10, A is pointed by R9
; N is pointed by R15. On return, R9 is pointing at last processed word.

mp_sub_np:
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R10,R6
    ADD R15,R6
    SETC   ; Need to set the carry bit for the first SUBC to be equivalent to SUB
insub128p:
    SUBC @R10+,0(R9) 
    MOV SR,R5
    INCD R9
    CMP R10,R6
    JZ fins128p
    MOV R5,SR
    JMP insub128p
fins128p:
    DECD R9
    MOV R5,SR ; Restore the carry flag for further propagation
    POPM.W #2,R6

	RETA

	.global mp_mulmod32_kara

; Performs 1-level Karatsuba multiplication of A and B.
; This function utilizes fully the 32-bit multiplier.
; A is pointed by R13, B is pointed by R14.
; The result T has to be pointed by R12 and at least 96 bytes long. R15 contains the size of B (in bytes).

mp_mulmod32_kara:

      MOV R12,R8
      ADD #54,R8 ; Upper bound for carry/borrow propagation

      ; a + b
      MOV R12,R9
      ADD #56,R9   ; 48+8
      
      MOV R13,R10  ; b
      
      MOV R13,R11  ; a
      ADD #16,R11

      MOV #16,R15
      CALLA #mp_add_128
  
      ; c + d
      MOV R12,R9
      ADD #76,R9
      
      MOV R14,R10 ; d
      
      MOV R14,R11 ; c
      ADD #16,R11
      
      CALLA #mp_add_128
      
      ; (a+b)*(c+d)
      MOV R12,R10
      ADD #56,R10
      
      MOV R12,R11
      ADD #76,R11
      
      MOV R12,R9
      ADD #16,R9
      
      MOV #20,R15
      CALLA #mp_mul32
      
      ; b*d
      MOV R13,R10  ; b
      
      MOV R14,R11  ; d
      
      MOV R12,R9
      ADD #52,R9
      
      ; Clear the destination
      MOV #32,R15
      CALLA #clear_mem
      
      MOV #16,R15
      CALLA #mp_mul32

      ; Add b*d to lower half
      MOV R12,R10
      ADD #52,R10 ; b*d
      
      MOV R12,R9 ; start
        
      MOV #32,R15
      CALLA #mp_add_np
      
      ; Propagate carry
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_cprop
      
      ; Subtract b*d from the upper half
      MOV R12,R10
      ADD #52,R10 ; b*d
      
      MOV R12,R9  ; upper half
      ADD #16,R9
      
      MOV #32,R15
      CALLA #mp_sub_np
      
      ; Propagate borrow
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_bprop
      
      ; a*c
      MOV R13,R10
      ADD #16,R10 ; a
      
      MOV R14,R11
      ADD #16,R11 ; c
      
      MOV R12,R9
      ADD #52,R9
      
      ; Clear the destination
      MOV #32,R15
      CALLA #clear_mem
      
      MOV #16,R15
      CALLA #mp_mul32
      
      ; Subtract a*c from the upper half
      MOV R12,R10
      ADD #52,R10 ; a*c
      
      MOV R12,R9  ; upper half
      ADD #16,R9
      
      MOV #32,R15
      CALLA #mp_sub_np
      
      ; Propagate borrow
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_bprop
      
      ; Add lower half of a*c to upper half
      MOV R12,R10
      ADD #52,R10 ; a*c
      
      MOV R12,R9 
      ADD #32,R9  ; Upper half
      
      MOV #16,R15
      CALLA #mp_add_np
      
      ; Propagate carry
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_cprop
      
      ; Clear lower half of a*c
      MOV R12,R9
      ADD #52,R9 ; a*c
      MOV #16,R15
      CALLA #clear_mem
      
      ; Add upper half of a*c to the carry
      MOV R12,R10
      ADD #68,R10 ; upper half of a*c
      
      MOV R12,R9 
      ADD #48,R9
       
      MOV #16,R15
      CALLA #mp_add_np
      
      CALLA #mp_mod32
      
	RETA

	.end
