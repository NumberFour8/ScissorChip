#include "msp430.h"
NAME msp_mul32_kara

EXTERN mp_cprop
EXTERN mp_bprop
EXTERN mp_mod32

PUBLIC mp_mul32_128
RSEG CODE

; Performs schoolbook multiplication of two n-byte numbers A and B.
; A is pointed by R10, B is pointed by R11
; Result is pointed by R9 and must be at least 2n bytes long.
; n is given by R15

mp_mul32_128
 
  PUSHM.W #4,R8
  
  ; For loop i = 0 .. 15
  ; R15 contains size of B
  MOV R11,R7   ; Traverses B
  MOV R10,R8   ; Prepare the limit for A
  ADD R15,R7
  ADD R15,R8
outer_for5

  ; (C,S) = t[i] + a[0]*b[i]
  MOV 0x0(R9),&MPY32L  ; t[i]
  MOV 0x2(R9),&MPY32H
  MOV #1,&OP2L       ; 1
  MOV #0,&OP2H
    
  MOV 0x0(R10),&MAC32L  ; a[0]
  MOV 0x2(R10),&MAC32H
  MOV 0x0(R11),&OP2L    ; b[i] 
  MOV 0x2(R11),&OP2H

  ; t[i] = S
  MOV RES0,0x0(R9)
  MOV RES1,0x2(R9)

  MOV R10,R6  ; Traverses A
  ADD #4,R6
  MOV R9,R5  ; Traverses T starting at i+1
  ADD #4,R5
  
inner_for5
   
    ; (C,S) = t[i+j] + a[j]*b[i] + C
   MOV RES2,&RES0   ; C
   MOV RES3,&RES1      
   MOV #0,&RES2       ; 1
   MOV #0,&RES3
  
   MOV @R5+,&MAC32L   ; t[i+j]
   MOV @R5+,&MAC32H
   MOV #1,&OP2L       ; 1
   MOV #0,&OP2H
    
   MOV @R6+,&MAC32L   ; a[j]
   MOV @R6+,&MAC32H
   MOV 0x0(R11),&OP2L ; b[i] 
   MOV 0x2(R11),&OP2H

   ; t[i+j] = S
   MOV RES0,-4(R5)
   MOV RES1,-2(R5)
   
   CMP R6,R8
   JNZ inner_for5

  ; t[i+s] = C
  MOV RES2,0x0(R5)
  MOV RES3,0x2(R5)

  ADD #4,R9   ; t[++i]
  ADD #4,R11  ; b[++i]
  CMP R11,R7
  JNZ outer_for5

  POPM.W #4,R8
  
RETA

PUBLIC mp_add_128   
RSEG CODE       

; Adds two 128-bit numbers A and B and stores the result in C.
; B is pointed by R11, A is pointed by R10
; The result C is pointed by R9

mp_add_128
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R11,R6
    ADD #16,R6
    CLRC   ; Need to reset carry bit for the first ADDC to be equivalent to ADD
inadd128
    MOV @R10+,0(R9)
    ADDC @R11+,0(R9) 
    MOV SR,R5
    INCD R9
    CMP R11,R6
    JZ fin128
    MOV R5,SR
    JMP inadd128

fin128   
    POPM.W #2,R6
RETA

PUBLIC mp_add_np   
RSEG CODE       

; Adds two N-byte numbers A and B in place, result is stored in A.
; B is pointed by R10, A is pointed by R9
; N is pointed by R15. On return, R9 is pointing at last processed word.

mp_add_np
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R10,R6
    ADD R15,R6
    CLRC   ; Need to reset carry bit for the first ADDC to be equivalent to ADD
inadd128p
    ADDC @R10+,0(R9) 
    MOV SR,R5
    INCD R9
    CMP R10,R6
    JZ fin128p
    MOV R5,SR
    JMP inadd128p

fin128p
    DECD R9
    MOV R5,SR ; Restore the carry flag for further propagation
    POPM.W #2,R6
RETA

; Subtracts two N-byte numbers B from A in place, result is stored in A.
; B is pointed by R10, A is pointed by R9
; N is pointed by R15. On return, R9 is pointing at last processed word.

mp_sub_np
  
    PUSHM.W #2,R6       ; Save R5-R6
    
    MOV R10,R6
    ADD R15,R6
    SETC   ; Need to set the carry bit for the first SUBC to be equivalent to SUB
insub128p
    SUBC @R10+,0(R9) 
    MOV SR,R5
    INCD R9
    CMP R10,R6
    JZ fins128p
    MOV R5,SR
    JMP insub128p
fins128p
    DECD R9
    MOV R5,SR ; Restore the carry flag for further propagation
    POPM.W #2,R6
RETA

PUBLIC clear_mem
RSEG CODE

; Clears N bytes of memory pointed by R9.
; N is given by R15.

clear_mem
    
    PUSH.W R8
    
    MOV R9,R8
    ADD R15,R8
    
clrmem
    DECD R8
    CLR 0(R8)
    CMP R8,R9
    JNZ clrmem
    
    POP.W R8
RETA

PUBLIC mp_mulmod32_kara
RSEG CODE

; Performs 1-level Karatsuba multiplication of A and B.
; This function utilizes fully the 32-bit multiplier.
; A is pointed by R13, B is pointed by R14.
; The result T has to be pointed by R12 and at least 96 bytes long. R15 contains the size of B (in bytes).

mp_mulmod32_kara

      MOV R12,R8
      ADD #54,R8 ; Upper bound for carry/borrow propagation

      ; a + b
      MOV R12,R9
      ADD #56,R9   ; 48+8
      
      MOV R13,R10  ; b
      
      MOV R13,R11  ; a
      ADD #16,R11

      MOV #16,R15
      CALLA #mp_add_128
  
      ; c + d
      MOV R12,R9
      ADD #76,R9
      
      MOV R14,R10 ; d
      
      MOV R14,R11 ; c
      ADD #16,R11
      
      CALLA #mp_add_128
      
      ; (a+b)*(c+d)
      MOV R12,R10
      ADD #56,R10
      
      MOV R12,R11
      ADD #76,R11
      
      MOV R12,R9
      ADD #16,R9
      
      MOV #20,R15
      CALLA #mp_mul32_128
      
      ; b*d
      MOV R13,R10  ; b
      
      MOV R14,R11  ; d
      
      MOV R12,R9
      ADD #52,R9
      
      ; Clear the destination
      MOV #32,R15
      CALLA #clear_mem
      
      MOV #16,R15
      CALLA #mp_mul32_128

      ; Add b*d to lower half
      MOV R12,R10
      ADD #52,R10 ; b*d
      
      MOV R12,R9 ; start
        
      MOV #32,R15
      CALLA #mp_add_np
      
      ; Propagate carry
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_cprop
      
      ; Subtract b*d from the upper half
      MOV R12,R10
      ADD #52,R10 ; b*d
      
      MOV R12,R9  ; upper half
      ADD #16,R9
      
      MOV #32,R15
      CALLA #mp_sub_np
      
      ; Propagate borrow
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_bprop
      
      ; a*c
      MOV R13,R10
      ADD #16,R10 ; a
      
      MOV R14,R11
      ADD #16,R11 ; c
      
      MOV R12,R9
      ADD #52,R9
      
      ; Clear the destination
      MOV #32,R15
      CALLA #clear_mem
      
      MOV #16,R15
      CALLA #mp_mul32_128
      
      ; Subtract a*c from the upper half
      MOV R12,R10
      ADD #52,R10 ; a*c
      
      MOV R12,R9  ; upper half
      ADD #16,R9
      
      MOV #32,R15
      CALLA #mp_sub_np
      
      ; Propagate borrow
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_bprop
      
      ; Add lower half of a*c to upper half
      MOV R12,R10
      ADD #52,R10 ; a*c
      
      MOV R12,R9 
      ADD #32,R9  ; Upper half
      
      MOV #16,R15
      CALLA #mp_add_np
      
      ; Propagate carry
      MOV R9,R10
      MOV R8,R11
      CALLA #mp_cprop
      
      ; Clear lower half of a*c
      MOV R12,R9
      ADD #52,R9 ; a*c
      MOV #16,R15
      CALLA #clear_mem
      
      ; Add upper half of a*c to the carry
      MOV R12,R10
      ADD #68,R10 ; upper half of a*c
      
      MOV R12,R9 
      ADD #48,R9
       
      MOV #16,R15
      CALLA #mp_add_np
      
      CALLA #mp_mod32
      
RETA

END