#include "msp430.h"
NAME msp_mul32_sos

EXTERN mp_mod32

PUBLIC mp_mulmod32_sos
RSEG CODE

; Performs schoolbook multiplication of A and B.
; This function utilizes fully the 32-bit multiplier.
; A is pointed by R13, B is pointed by R14.
; The result T has to be pointed by R12 and at least 64 bytes long. R15 contains the size of B (in bytes).

mp_mulmod32_sos

  PUSH R12
  PUSHM.W #4,R7
  
  ; Separated Operand Scanning
  ; -------------------------------------- 

  ; For loop i = 0 .. s-1
  ; R15 contains size of B
  ADD R14,R15   ; Traverses B
  MOV R13,R6    ; Prepare the limit for A
  ADD #32,R6
outer_for4

  ; (C,S) = t[i] + a[0]*b[i]
  MOV 0x0(R12),&MPY32L  ; t[i]
  MOV 0x2(R12),&MPY32H
  MOV #1,&OP2L       ; 1
  MOV #0,&OP2H
    
  MOV 0x0(R13),&MAC32L  ; a[0]
  MOV 0x2(R13),&MAC32H
  MOV 0x0(R14),&OP2L    ; b[i] 
  MOV 0x2(R14),&OP2H

  ; t[i] = S
  MOV RES0,0x0(R12)
  MOV RES1,0x2(R12)

  MOV R13,R5  ; Traverses A
  ADD #4,R5
  MOV R12,R7  ; Traverses T starting at i+1
  ADD #4,R7
inner_for4
   
    ; (C,S) = t[i+j] + a[j]*b[i] + C
   MOV RES2,&MPY32L   ; C
   MOV RES3,&MPY32H      
   MOV #1,&OP2L       ; 1
   MOV #0,&OP2H
  
   MOV @R7+,&MAC32L   ; t[i+j]
   MOV @R7+,&MAC32H
   MOV #1,&OP2L       ; 1
   MOV #0,&OP2H
    
   MOV @R5+,&MAC32L   ; a[j]
   MOV @R5+,&MAC32H
   MOV 0x0(R14),&OP2L ; b[i] 
   MOV 0x2(R14),&OP2H

   ; t[i+j] = S
   MOV RES0,-4(R7)
   MOV RES1,-2(R7)
   
   CMP R5,R6
   JNZ inner_for4

  ; t[i+s] = C
  MOV RES2,0x0(R7)
  MOV RES3,0x2(R7)

  ADD #4,R12
  ADD #4,R14  ; b[++i]
  CMP R14,R15
  JNZ outer_for4

  POPM.W #4,R7
  POP R12
  
  CALLA #mp_mod32
   
RETA

END